3.2.10 (Media Mark)
4a37188427477de3d1123420855fe830256f9d71
o:Sass::Tree::RootNode
:@template"´,// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// This is a set of mixins for those who want to mess around with flexbox
// using the native support of current browsers. For full support table
// check: http://caniuse.com/flexbox
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, Safari, mobile webkit browsers)
// * Prefixed standard syntax (Chrome)
// * Final standards syntax (FF, IE11, Opera 12.1)
//
// This was inspired by:
//
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//
// With help from:
//
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes

//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
	// Shorter version:
	@mixin flex-dir($value: false) { @include flex-direction($value); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {
	-webkit-box-flex: $fg;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}
	// Shorter version:
	@mixin flex-just($value: flex-start) { @include justify-content($value); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}
:@options{ :@has_childrenT:@children[5o:Sass::Tree::CommentNode
;@:@value["/* Flexbox Mixins
 * http://philipwalton.github.io/solved-by-flexbox/
 * https://github.com/philipwalton/solved-by-flexbox
 *
 * Copyright (c) 2013 Brian Franco
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * This is a set of mixins for those who want to mess around with flexbox
 * using the native support of current browsers. For full support table
 * check: http://caniuse.com/flexbox
 *
 * Basically this will use:
 *
 * * Fallback, old syntax (IE10, Safari, mobile webkit browsers)
 * * Prefixed standard syntax (Chrome)
 * * Final standards syntax (FF, IE11, Opera 12.1)
 *
 * This was inspired by:
 *
 * * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
 *
 * With help from:
 *
 * * http://w3.org/tr/css3-flexbox/
 * * http://the-echoplex.net/flexyboxes/
 * * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
 * * http://css-tricks.com/using-flexbox/
 * * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
 * * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes */:
@type:silent;	[ :
@lineio;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;i4o;

;@;["u/* Flexbox Containers
 *
 * The 'flex' value causes an element to generate a block-level flex
 * container box.
 *
 * The 'inline-flex' value causes an element to generate a inline-level
 * flex container box.
 *
 * display: flex | inline-flex
 *
 * http://w3.org/tr/css3-flexbox/#flex-containers
 *
 * (Placeholder selectors for each type, for those who rather @extend) */;;;	[ ;i6o:Sass::Tree::MixinDefNode;@:
@name"flexbox:@splat0;T;	[
o:Sass::Tree::PropNode:
@tabsi ;@;["display:@prop_syntax:new;o:Sass::Script::String;@;"-webkit-box;:identifier;	[ ;iEo;;i ;@;["display;;;o;;@;"-webkit-flex;;;	[ ;iFo;;i ;@;["display;;;o;;@;"-moz-flex;;;	[ ;iGo;;i ;@;["display;;;o;;@;"-ms-flexbox;;;	[ ;iHo;;i ;@;["display;;;o;;@;"	flex;;;	[ ;iI:
@args[ ;iDo:Sass::Tree::RuleNode;i ;@:
@rule["%flexbox:@parsed_ruleso:"Sass::Selector::CommaSequence:@members[o:Sass::Selector::Sequence;[o:#Sass::Selector::SimpleSequence
;[o: Sass::Selector::Placeholder;["flexbox:@filename" ;iL:@subject0;!@C:@sourceso:Set:
@hash{ ;iL;!@C;iL;T;	[o:Sass::Tree::MixinNode:@keywords{ ;@;"flexbox;0;	[ ;[ ;iL;iLo;

;@;[",/*---------------------------------- */;;;	[ ;iNo;;@;"inline-flex;0;T;	[
o;;i ;@;["display;;;o;;@;"-webkit-inline-box;;;	[ ;iQo;;i ;@;["display;;;o;;@;"-webkit-inline-flex;;;	[ ;iRo;;i ;@;["display;;;o;;@;"-moz-inline-flex;;;	[ ;iSo;;i ;@;["display;;;o;;@;"-ms-inline-flexbox;;;	[ ;iTo;;i ;@;["display;;;o;;@;"inline-flex;;;	[ ;iU;[ ;iPo;;i ;@;["%inline-flex;o;;[o;;[o;
;[o; ;["inline-flex;!" ;iX;"0;!@~;#o;$;%{ ;iX;!@~;iX;T;	[o;&;'{ ;@;"inline-flex;0;	[ ;[ ;iX;iXo;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;iZo;

;@;["~/* Flexbox Direction
 *
 * The 'flex-direction' property specifies how flex items are placed in
 * the flex container, by setting the direction of the flex container's
 * main axis. This determines the direction that flex items are laid out in.
 *
 * Values: row | row-reverse | column | column-reverse
 * Default: row
 *
 * http://w3.org/tr/css3-flexbox/#flex-direction-property */;;;	[ ;i\o;;@;"flex-direction;0;T;	[
u:Sass::Tree::IfNoden[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"row-reverse:
@type:identifier:
@lineih:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;ih;ihu:Sass::Tree::IfNode [o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"column:
@type:identifier:
@lineik:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;ik;iku:Sass::Tree::IfNodeÚ[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"column-reverse:
@type:identifier:
@linein:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;in;inu:Sass::Tree::IfNode[00[o:Sass::Tree::PropNode:
@tabsi :@options{ :
@name["-webkit-box-direction:@prop_syntax:new:@valueo:Sass::Script::String;@;"normal:
@type:identifier:@children[ :
@lineiro; ;i ;@;["-webkit-box-orient;	;
;o;;@;"horizontal;;;[ ;is[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-direction:@prop_syntax:new;o;
;@;"reverse;;:@children[ ;ioo;;i ;@;["-webkit-box-orient;;;o;
;@;"vertical;;;[ ;ip[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-direction:@prop_syntax:new;o;
;@;"normal;;:@children[ ;ilo;;i ;@;["-webkit-box-orient;;;o;
;@;"vertical;;;[ ;im[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-direction:@prop_syntax:new;o;
;@;"reverse;;:@children[ ;iio;;i ;@;["-webkit-box-orient;;;o;
;@;"horizontal;;;[ ;ijo;;i ;@;["-webkit-flex-direction;;;o:Sass::Script::Variable	;@;"
value:@underscored_name"
value;iu;	[ ;iuo;;i ;@;["-moz-flex-direction;;;o;)	;@;"
value;*"
value;iv;	[ ;ivo;;i ;@;["-ms-flex-direction;;;o;)	;@;"
value;*"
value;iw;	[ ;iwo;;i ;@;["flex-direction;;;o;)	;@;"
value;*"
value;ix;	[ ;ix;[[o;);@;"
value;*"
valueo;	;@;"row;;;ig;igo;

;@;["/* Shorter version: */;;;	[ ;izo;;@;"flex-dir;0;T;	[o;&;'{ ;@;"flex-direction;0;	[ ;[o;)	;@;"
value;*"
value;i{;i{;[[o;);@;"
value;*"
valueo:Sass::Script::Bool;@;F;i{;i{o;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;i}o;

;@;["M/* Flexbox Wrap
 *
 * The 'flex-wrap' property controls whether the flex container is single-line
 * or multi-line, and the direction of the cross-axis, which determines
 * the direction new lines are stacked in.
 *
 * Values: nowrap | wrap | wrap-reverse
 * Default: nowrap
 *
 * http://w3.org/tr/css3-flexbox/#flex-wrap-property */;;;	[ ;io;;@;"flex-wrap;0;T;	[
o;

;@;[""/* No Webkit Box fallback. */;;;	[ ;io;;i ;@;["-webkit-flex-wrap;;;o;)	;@;"
value;*"
value;i;	[ ;io;;i ;@;["-moz-flex-wrap;;;o;)	;@;"
value;*"
value;i;	[ ;iu;(:[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"nowrap:
@type:identifier:
@linei:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;i;iu:Sass::Tree::IfNodeÅ[00[o:Sass::Tree::PropNode:
@tabsi :@options{ :
@name["-ms-flex-wrap:@prop_syntax:new:@valueo:Sass::Script::Variable	;@;"
value:@underscored_name"
value:
@linei:@children[ ;i[o:Sass::Tree::PropNode:
@tabsi ;@;["-ms-flex-wrap:@prop_syntax:new;o;
;@;"	none;;:@children[ ;io;;i ;@;["flex-wrap;;;o;)	;@;"
value;*"
value;i;	[ ;i;[[o;);@;"
value;*"
valueo;	;@;"nowrap;;;i;io;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;io;

;@;["K/* Flexbox Flow (shorthand)
 *
 * The 'flex-flow' property is a shorthand for setting the 'flex-direction'
 * and 'flex-wrap' properties, which together define the flex container's
 * main and cross axes.
 *
 * Values: <flex-direction> | <flex-wrap>
 * Default: row nowrap
 *
 * http://w3.org/tr/css3-flexbox/#flex-flow-property */;;;	[ ;io;;@;"flex-flow;0;T;	[
o;

;@;[""/* No Webkit Box fallback. */;;;	[ ;io;;i ;@;["-webkit-flex-flow;;;o;)	;@;"values;*"values;i ;	[ ;i o;;i ;@;["-moz-flex-flow;;;o;)	;@;"values;*"values;i¡;	[ ;i¡o;;i ;@;["-ms-flex-flow;;;o;)	;@;"values;*"values;i¢;	[ ;i¢o;;i ;@;["flex-flow;;;o;)	;@;"values;*"values;i£;	[ ;i£;[[o;);@;"values;*"valueso:Sass::Script::List	;@;[o;	;@;"row;;;io;	;@;"nowrap;;;i:@separator:
space;i;io;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;i¦o;

;@;["æ/* Flexbox Order
 *
 * The 'order' property controls the order in which flex items appear within
 * their flex container, by assigning them to ordinal groups.
 *
 * Default: 0
 *
 * http://w3.org/tr/css3-flexbox/#order-property */;;;	[ ;i¨o;;@;"
order;0;T;	[
o;;i ;@;["-webkit-box-ordinal-group;;;o:Sass::Script::Operation
:@operator:	plus;@:@operand2o:Sass::Script::Number:@denominator_units[ ;@:@numerator_units[ :@original"1;i;i²:@operand1o;)	;@;"int;*"int;i²;i²;	[ ;i²o;;i ;@;["-webkit-order;;;o;)	;@;"int;*"int;i³;	[ ;i³o;;i ;@;["-moz-order;;;o;)	;@;"int;*"int;i´;	[ ;i´o;;i ;@;["-ms-flex-order;;;o;)	;@;"int;*"int;iµ;	[ ;iµo;;i ;@;["
order;;;o;)	;@;"int;*"int;i¶;	[ ;i¶;[[o;);@;"int;*"into;3;4@8;@;5[ ;6"0;i ;i±;i±o;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;i¹o;

;@;["¶/* Flexbox Grow
 *
 * The 'flex-grow' property sets the flex grow factor. Negative numbers
 * are invalid.
 *
 * Default: 0
 *
 * http://w3.org/tr/css3-flexbox/#flex-grow-property */;;;	[ ;i»o;;@;"flex-grow;0;T;	[
o;;i ;@;["-webkit-box-flex;;;o;)	;@;"int;*"int;iÅ;	[ ;iÅo;;i ;@;["-webkit-flex-grow;;;o;)	;@;"int;*"int;iÆ;	[ ;iÆo;;i ;@;["-moz-flex-grow;;;o;)	;@;"int;*"int;iÇ;	[ ;iÇo;;i ;@;["-ms-flex-positive;;;o;)	;@;"int;*"int;iÈ;	[ ;iÈo;;i ;@;["flex-grow;;;o;)	;@;"int;*"int;iÉ;	[ ;iÉ;[[o;);@;"int;*"into;3;4@8;@;5[ ;6"0;i ;iÄ;iÄo;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;iÌo;

;@;["¾/* Flexbox Shrink
 *
 * The 'flex-shrink' property sets the flex shrink factor. Negative numbers
 * are invalid.
 *
 * Default: 1
 *
 * http://w3.org/tr/css3-flexbox/#flex-shrink-property */;;;	[ ;iÎo;;@;"flex-shrink;0;T;	[	o;;i ;@;["-webkit-flex-shrink;;;o;)	;@;"int;*"int;iØ;	[ ;iØo;;i ;@;["-moz-flex-shrink;;;o;)	;@;"int;*"int;iÙ;	[ ;iÙo;;i ;@;["-ms-flex-negative;;;o;)	;@;"int;*"int;iÚ;	[ ;iÚo;;i ;@;["flex-shrink;;;o;)	;@;"int;*"int;iÛ;	[ ;iÛ;[[o;);@;"int;*"into;3;4@8;@;5[ ;6"1;i;i×;i×o;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;iÞo;

;@;["Ì/* Flexbox Basis
 *
 * The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
 *
 * Values: Like "width"
 * Default: auto
 *
 * http://w3.org/tr/css3-flexbox/#flex-shrink-property */;;;	[ ;iào;;@;"flex-basis;0;T;	[	o;;i ;@;["-webkit-flex-basis;;;o;)	;@;"
value;*"
value;iê;	[ ;iêo;;i ;@;["-moz-flex-basis;;;o;)	;@;"
value;*"
value;ië;	[ ;iëo;;i ;@;["-ms-flex-preferred-size;;;o;)	;@;"
value;*"
value;iì;	[ ;iìo;;i ;@;["flex-basis;;;o;)	;@;"
value;*"
value;ií;	[ ;ií;[[o;);@;"
value;*"
valueo;	;@;"	auto;;;ié;iéo;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;iðo;

;@;["/* Flexbox "Flex" (shorthand)
 *
 * The 'flex' property specifies the components of a flexible length: the
 * flex grow factor and flex shrink factor, and the flex basis. When an
 * element is a flex item, 'flex' is consulted instead of the main size
 * property to determine the main size of the element. If an element is
 * not a flex item, 'flex' has no effect.
 *
 * Values: none | <flex-grow> <flex-shrink> || <flex-basis>
 * Default: See individual properties (1 1 0).
 *
 * http://w3.org/tr/css3-flexbox/#flex-property */;;;	[ ;iòo;;@;"	flex;0;T;	[o;;i ;@;["-webkit-box-flex;;;o;)	;@;"fg;*"fg;i ;	[ ;i o;;i ;@;["-webkit-flex;;;o;,	;@;[o;)	;@;"fg;*"fg;io;)	;@;"fs;*"fs;io;)	;@;"fb;*"fb;i;-;.;i;	[ ;io;;i ;@;["-moz-box-flex;;;o;)	;@;"fg;*"fg;i;	[ ;io;;i ;@;["-moz-flex;;;o;,	;@;[o;)	;@;"fg;*"fg;io;)	;@;"fs;*"fs;io;)	;@;"fb;*"fb;i;-;.;i;	[ ;io;;i ;@;["-ms-flex;;;o;,	;@;[o;)	;@;"fg;*"fg;io;)	;@;"fs;*"fs;io;)	;@;"fb;*"fb;i;-;.;i;	[ ;io;;i ;@;["	flex;;;o;,	;@;[o;)	;@;"fg;*"fg;io;)	;@;"fs;*"fs;io;)	;@;"fb;*"fb;i;-;.;i;	[ ;i;[[o;);@;"fg;*"fgo;3;4@8;@;5[ ;6"1;i;iÿ[o;);@;"fs;*"fso:Sass::Script::Null;@;0;iÿ[o;);@;"fb;*"fbo;8;@;0;iÿ;iÿo;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;io;

;@;["Í/* Flexbox Justify Content
 *
 * The 'justify-content' property aligns flex items along the main axis
 * of the current line of the flex container. This is done after any flexible
 * lengths and any auto margins have been resolved. Typically it helps distribute
 * extra free space leftover when either all the flex items on a line are
 * inflexible, or are flexible but have reached their maximum size. It also
 * exerts some control over the alignment of items when they overflow the line.
 *
 * Note: 'space-*' values not supported in older syntaxes.
 *
 * Values: flex-start | flex-end | center | space-between | space-around
 * Default: flex-start
 *
 * http://w3.org/tr/css3-flexbox/#justify-content-property */;;;	[ ;i
o;;@;"justify-content;0;T;	[	u;(l[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-start:
@type:identifier:
@linei:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;i;iu:Sass::Tree::IfNode¦[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-end:
@type:identifier:
@linei:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;i;iu:Sass::Tree::IfNodeæ[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"space-between:
@type:identifier:
@linei!:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;i!;i!u:Sass::Tree::IfNode[00[o:Sass::Tree::PropNode:
@tabsi :@options{ :
@name["-webkit-box-pack:@prop_syntax:new:@valueo:Sass::Script::Variable	;@;"
value:@underscored_name"
value:
@linei%:@children[ ;i%o; ;i ;@;["-ms-flex-pack;	;
;o;	;@;"
value;"
value;i&;[ ;i&[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-pack:@prop_syntax:new;o;
;@;"justify;;:@children[ ;i"o;;i ;@;["-ms-flex-pack;;;o;
;@;"justify;;;[ ;i#[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-pack:@prop_syntax:new;o;
;@;"end;;:@children[ ;io;;i ;@;["-ms-flex-pack;;;o;
;@;"end;;;[ ;i [o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-pack:@prop_syntax:new;o;
;@;"
start;;:@children[ ;io;;i ;@;["-ms-flex-pack;;;o;
;@;"
start;;;[ ;io;;i ;@;["-webkit-justify-content;;;o;)	;@;"
value;*"
value;i(;	[ ;i(o;;i ;@;["-moz-justify-content;;;o;)	;@;"
value;*"
value;i);	[ ;i)o;;i ;@;["justify-content;;;o;)	;@;"
value;*"
value;i*;	[ ;i*;[[o;);@;"
value;*"
valueo;	;@;"flex-start;;;i;io;

;@;["/* Shorter version: */;;;	[ ;i,o;;@;"flex-just;0;T;	[o;&;'{ ;@;"justify-content;0;	[ ;[o;)	;@;"
value;*"
value;i-;i-;[[o;);@;"
value;*"
valueo;	;@;"flex-start;;;i-;i-o;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;i/o;

;@;["/* Flexbox Align Items
 *
 * Flex items can be aligned in the cross axis of the current line of the
 * flex container, similar to 'justify-content' but in the perpendicular
 * direction. 'align-items' sets the default alignment for all of the flex
 * container's items, including anonymous flex items. 'align-self' allows
 * this default alignment to be overridden for individual flex items. (For
 * anonymous flex items, 'align-self' always matches the value of 'align-items'
 * on their associated flex container.)
 *
 * Values: flex-start | flex-end | center | baseline | stretch
 * Default: stretch
 *
 * http://w3.org/tr/css3-flexbox/#align-items-property */;;;	[ ;i1o;;@;"align-items;0;T;	[	u;(¥[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-start:
@type:identifier:
@lineiA:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;iA;iAu:Sass::Tree::IfNodeÝ[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-end:
@type:identifier:
@lineiD:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;iD;iDu:Sass::Tree::IfNode[00[o:Sass::Tree::PropNode:
@tabsi :@options{ :
@name["-webkit-box-align:@prop_syntax:new:@valueo:Sass::Script::Variable	;@;"
value:@underscored_name"
value:
@lineiH:@children[ ;iHo; ;i ;@;["-ms-flex-align;	;
;o;	;@;"
value;"
value;iI;[ ;iI[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-align:@prop_syntax:new;o;
;@;"end;;:@children[ ;iEo;;i ;@;["-ms-flex-align;;;o;
;@;"end;;;[ ;iF[o:Sass::Tree::PropNode:
@tabsi ;@;["-webkit-box-align:@prop_syntax:new;o;
;@;"
start;;:@children[ ;iBo;;i ;@;["-ms-flex-align;;;o;
;@;"
start;;;[ ;iCo;;i ;@;["-webkit-align-items;;;o;)	;@;"
value;*"
value;iK;	[ ;iKo;;i ;@;["-moz-align-items;;;o;)	;@;"
value;*"
value;iL;	[ ;iLo;;i ;@;["align-items;;;o;)	;@;"
value;*"
value;iM;	[ ;iM;[[o;);@;"
value;*"
valueo;	;@;"stretch;;;i@;i@o;

;@;[",/*---------------------------------- */;;;	[ ;iPo;

;@;["w/* Flexbox Align Self
 *
 * Values: auto | flex-start | flex-end | center | baseline | stretch
 * Default: auto */;;;	[ ;iRo;;@;"align-self;0;T;	[
o;

;@;[""/* No Webkit Box Fallback. */;;;	[ ;iXo;;i ;@;["-webkit-align-self;;;o;)	;@;"
value;*"
value;iY;	[ ;iYo;;i ;@;["-moz-align-self;;;o;)	;@;"
value;*"
value;iZ;	[ ;iZu;(Ò[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-start:
@type:identifier:
@linei[:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;i[;i[u:Sass::Tree::IfNodeM[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-end:
@type:identifier:
@linei]:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;i];i]u:Sass::Tree::IfNodeÍ[00[o:Sass::Tree::PropNode:
@tabsi :@options{ :
@name["-ms-flex-item-align:@prop_syntax:new:@valueo:Sass::Script::Variable	;@;"
value:@underscored_name"
value:
@linei`:@children[ ;i`[o:Sass::Tree::PropNode:
@tabsi ;@;["-ms-flex-item-align:@prop_syntax:new;o;
;@;"end;;:@children[ ;i^[o:Sass::Tree::PropNode:
@tabsi ;@;["-ms-flex-item-align:@prop_syntax:new;o;
;@;"
start;;:@children[ ;i\o;;i ;@;["align-self;;;o;)	;@;"
value;*"
value;ib;	[ ;ib;[[o;);@;"
value;*"
valueo;	;@;"	auto;;;iW;iWo;

;@;["P/*---------------------------------------------------------------------- */;;;	[ ;ieo;

;@;["î/* Flexbox Align Content
 *
 * The 'align-content' property aligns a flex container's lines within the
 * flex container when there is extra space in the cross-axis, similar to
 * how 'justify-content' aligns individual items within the main-axis. Note,
 * this property has no effect when the flexbox has only a single line.
 *
 * Values: flex-start | flex-end | center | space-between | space-around | stretch
 * Default: stretch
 *
 * http://w3.org/tr/css3-flexbox/#align-content-property */;;;	[ ;igo;;@;"align-content;0;T;	[
o;

;@;[""/* No Webkit Box Fallback. */;;;	[ ;ito;;i ;@;["-webkit-align-content;;;o;)	;@;"
value;*"
value;iu;	[ ;iuo;;i ;@;["-moz-align-content;;;o;)	;@;"
value;*"
value;iv;	[ ;ivu;(Ï[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-start:
@type:identifier:
@lineiw:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;iw;iwu:Sass::Tree::IfNodeK[o:Sass::Script::Operation
:@operator:eq:@options{ :@operand2o:Sass::Script::String	;@:@value"flex-end:
@type:identifier:
@lineiy:@operand1o:Sass::Script::Variable	;@:
@name"
value:@underscored_name"
value;iy;iyu:Sass::Tree::IfNodeÌ[00[o:Sass::Tree::PropNode:
@tabsi :@options{ :
@name["-ms-flex-line-pack:@prop_syntax:new:@valueo:Sass::Script::Variable	;@;"
value:@underscored_name"
value:
@linei|:@children[ ;i|[o:Sass::Tree::PropNode:
@tabsi ;@;["-ms-flex-line-pack:@prop_syntax:new;o;
;@;"end;;:@children[ ;iz[o:Sass::Tree::PropNode:
@tabsi ;@;["-ms-flex-line-pack:@prop_syntax:new;o;
;@;"
start;;:@children[ ;ixo;;i ;@;["align-content;;;o;)	;@;"
value;*"
value;i~;	[ ;i~;[[o;);@;"
value;*"
valueo;	;@;"stretch;;;is;is;i